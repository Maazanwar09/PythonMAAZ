def is_perfect_number(n):

if n < 1:

return False

sum_of_divisors = 0

for i in range(1, n):

if n % i == 0:

sum_of_divisors += i

return sum_of_divisors == n


number = int(input("Enter an integer: "))


if is_perfect_number(number):


print(f"{number} is a perfect number")


else:

print(f"(number) is not a perfect number")

2
def is armstrong_number(num):

num strstr(num).

num_digits len(num_str)

sum_of_powers = sum(int(digit)

 num digits for digit in num_str)

return sum of_powers num

number int(input("Enter an integer: "))


if is_armstrong_number(number):

print (f" (number) is an Armstrong number.")

 else:


print(f" (number) is not an Armstrong number.")

3.
A program to detect whether a number is prime or not.

# A number is prime if it is only divisible by 1 and itself.

def is_prime(n):

 if n 1:

return False

for i in range(2, n):

if n % i 0:

return False

return True

 n = int(input("Enter a number: "))


if is_prime(n):

print(f"(n) is a prime number")

else:


print(f"{n} is not a prime number")

4.
#a function to compute GCD of two integers.

def gcd(x, y):

while y != 0: temp = y y = x%y x = temp

return x

num1 = int(input("Enter first number: "))

num2 = int(input("Enter second number: "))

print("GCD of", num1, "and", num2, "is", gcd(num1, num2)

5.

def gcd(x, y): while y != 0: temp = y y = xy x = temp return x

num1 = int(input("Enter fist number: "))

num2= int(input("Enter second number: "))

if gcd(num1, num2) == 1:

print(num1, "and", num2, "are relatively prime")

else:

print(num1, "and", num2, "are not relatively prime")

6.

def narcissistic_number(n):

for num in range(10**(n-1), 10**n): sum = 0 temp = num while temp > 0: digit temp % 10 sum += digit ** n temp //= 10 if num == sum: print(num, end=", ")

print(f"are (n) narcissistic numbers")

n = int(input("Enter value of 'n': "))

narcissistic_number(n)

7.

def chk(n):

a, i = 1 0 while a < n a = 2 ^ i if a ==n

return True

i +=1

return False

n = int(input("Enter a number: "))

if chk(n):

print (f^ * \{n\} is in of 2^k")

else:

print (f^ prime prime \{n\} is not in 2 ^ k ")

8.
def is_prime(n):

if n <= 1: return False for i in range(2, n): if n % i == 0:

return False

return True

def is_mersenne_prime(n):

if is_prime(n):

for i in range(1, n):

if 2**11 == n:

return True

return False

n = int(input("Enter a number: "))

if is_mersenne_prime(n):

print(f"{n) is a Mersenne prime.")

else:

print(f"{n} is not a Mersenne prime.")

9.

def gcd(a, b):

if b = 0:

return a

return gcd(b, a % b)

def euler_totient(n):

count = 0

for i in range(1, n):

if gcd(n, 1)-1:

count += 1

return count

n = int(input("Enter a number: "))

print(f"Totient of {n} is {euler_totient(n)}.")

10

def order(r, n):

for k in range(1, n):

if r**k % n 1:

return k

return -1

int(input("Enter r: "))

nint(input("Enter n: "))

print(f"Order of (r) under modulo {n} operation is (order(r, n))."

11.

import re

def password_strength (password):

length_criteria len(password) >= 8

upper_criteria re.search(r' [A-Z]', password)

lower_criteria = re.search(r' [a-z]', password)

number criteria re.search(r' [0-9]', password)

special_criteria re.search(r' [@$!%*?&]', password)

# Calculate the strength score

score = 0

if length_criteria:

score += 1

if upper_criteria:

score += 1

if lower_criteria:

score += 1

if number_criteria:

score += 1

if special_criteria:

score += 1

if score <= 2:

return "Weak"

elif score <= 4:

return "Moderate"

else:

return "Strong"

password= input("Enter a password to test its strength: ")

strength = password_strength(password)

print(f"Password: {password), Strength: {strength}")